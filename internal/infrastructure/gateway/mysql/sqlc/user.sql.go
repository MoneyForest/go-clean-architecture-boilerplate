// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const CountUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM ` + "`" + `user` + "`" + `
`

func (q *Queries) CountUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, CountUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const CreateUser = `-- name: CreateUser :execresult
INSERT INTO ` + "`" + `user` + "`" + ` (
    id,
    email,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?
)
`

type CreateUserParams struct {
	ID        string    `json:"id"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, CreateUser,
		arg.ID,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
}

const DeleteUser = `-- name: DeleteUser :exec
DELETE FROM ` + "`" + `user` + "`" + `
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, DeleteUser, id)
	return err
}

const ExistsUser = `-- name: ExistsUser :one
SELECT EXISTS(
    SELECT 1 FROM ` + "`" + `user` + "`" + ` WHERE id = ?
)
`

func (q *Queries) ExistsUser(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, ExistsUser, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const GetUser = `-- name: GetUser :one
SELECT id, email, created_at, updated_at FROM ` + "`" + `user` + "`" + `
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, GetUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListUsers = `-- name: ListUsers :many
SELECT id, email, created_at, updated_at FROM ` + "`" + `user` + "`" + `
ORDER BY created_at DESC
LIMIT ? OFFSET ?
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, ListUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateUser = `-- name: UpdateUser :execresult
UPDATE ` + "`" + `user` + "`" + `
SET
    email = ?,
    updated_at = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Email     string    `json:"email"`
	UpdatedAt time.Time `json:"updated_at"`
	ID        string    `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, UpdateUser, arg.Email, arg.UpdatedAt, arg.ID)
}
