basePath: /api/v1
definitions:
  apperror.AppError:
    properties:
      cause: {}
      code:
        $ref: '#/definitions/apperror.ErrorCode'
      details:
        additionalProperties: true
        type: object
      message:
        type: string
    type: object
  apperror.ErrorCode:
    enum:
    - INVALID_ARGUMENT
    - NOT_FOUND
    - ALREADY_EXISTS
    - UNAUTHORIZED
    - PERMISSION_DENIED
    - PRECONDITION_FAILED
    - CRITICAL
    type: string
    x-enum-varnames:
    - InvalidArgument
    - NotFound
    - AlreadyExists
    - Unauthorized
    - PermissionDenied
    - PreconditionFailed
    - Critical
  dto.CreateUserRequestBody:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
    type: object
  dto.CreateUserResponse:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
  dto.DeleteUserResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  dto.GetUserResponse:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
  dto.ListUsersResponse:
    properties:
      page:
        type: integer
      pageSize:
        type: integer
      total:
        type: integer
      totalPage:
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.UpdateUserRequestBody:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
    type: object
  dto.UpdateUserResponse:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
  dto.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server using clean architecture.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go Clean Architecture API
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Get a paginated list of users
      parameters:
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      - default: 0
        description: Number of items to skip
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ListUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequestBody'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.DeleteUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user by ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.GetUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Get user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user by ID
      parameters:
      - description: User ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequestBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UpdateUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/apperror.AppError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/apperror.AppError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/apperror.AppError'
      summary: Update user
      tags:
      - users
swagger: "2.0"
